ntop=11)
dfPCA <- cbind(data.frame(pc1=pc[,1], pc2=pc[,2]), lupusMetaEuropean)
dfPCA$Age <- as.numeric(dfPCA$Age)
ggplot(dfPCA, aes(x=pc1, y=pc2, col=group)) +
geom_point()
ggplot(dfPCA, aes(x=pc1, y=pc2, col=batch_cov)) +
geom_point()
ggplot(dfPCA, aes(x=pc1, y=pc2, col=Age)) +
geom_point()
ggplot(dfPCA, aes(x=pc1, y=pc2, col=Sex)) +
geom_point()
ggplot(dfPCA, aes(x=pc1, y=pc2, col=SLE_status)) +
geom_point()
ggplot(dfPCA, aes(x=pc1, y=pc2, col=Processing_Cohort)) +
geom_point()
table(table(droplevels(lupusMetaAll$ind_cov))) # 49+14+5=68 samples constituting 92 replicates
patientAll <- lupusMetaAll$ind_cov
designAll <- model.matrix(~SLE_status*pop_cov + Processing_Cohort, data=lupusMetaAll)
v <- voomCLR(counts = lupusCountMatAll,
design = designAll,
lib.size = NULL,
plot = TRUE,
span=.8)
cf <- duplicateCorrelation(v, designAll, block=patientAll)
v <- voomCLR(counts = lupusCountMatAll,
design = designAll,
lib.size = NULL,
block = patientAll,
correlation = cf$consensus,
span=.8)
cf <- duplicateCorrelation(v, designAll, block=patientAll)
fit <- lmFit(v, designAll,
block = patientAll,
correlation = cf$consensus)
fit <- lmFit(v, designAll)
plotBeta(fit)
fit <- eBayes(fit)
# tt <- topTableBC(fit, coef="SLE_statusSLE", number=Inf, bootstrap="nonparametric")
tt <- topTableBC(fit, coef="SLE_statusSLE", number=Inf, bootstrap="parametric", voomWeights=v$weights)
tt
ttAsian <- tt
patientAll <- lupusMetaAll$ind_cov
designAll <- model.matrix(~SLE_status*pop_cov, data=lupusMetaAll)
v <- voomCLR(counts = lupusCountMatAll,
design = designAll,
lib.size = NULL,
plot = TRUE,
span=.8)
cf <- duplicateCorrelation(v, designAll, block=patientAll)
v <- voomCLR(counts = lupusCountMatAll,
design = designAll,
lib.size = NULL,
block = patientAll,
correlation = cf$consensus,
span=.8)
cf <- duplicateCorrelation(v, designAll, block=patientAll)
fit <- lmFit(v, designAll,
block = patientAll,
correlation = cf$consensus)
fit <- lmFit(v, designAll)
L <- matrix(0, nrow=ncol(fit$coefficients), ncol=3)
rownames(L) <- colnames(fit$coefficients)
colnames(L) <- c("Asian", "European", "Interaction")
L["SLE_statusSLE","Asian"] <- 1
L[c("SLE_statusSLE", "SLE_statusSLE:pop_covEuropean"),"European"] <- 1
L["SLE_statusSLE:pop_covEuropean","Interaction"] <- 1
conFit <- contrasts.fit(fit,
contrasts = L)
plotBeta(conFit)
conFit <- eBayes(conFit)
ttList <- lapply(1:ncol(L), function(xx){
topTableBC(conFit, coef=xx, number=Inf,
bootstrap="parametric", voomWeights = v$weights, contrastMatrix=L[,xx,drop=FALSE])
})
names(ttList) <- colnames(L)
ttList
resDfAll <- data.frame(population = unlist(lapply(ttList, rownames)),
contrast = rep(c("Asian", "European", "Interaction"), each=nPopulations),
log2FC = unlist(lapply(ttList, function(x) x$logFC)),
padj = unlist(lapply(ttList, function(x) x$adj.P.Val))
)
nPopulations <- nrow(lupusCountMatAll)
allPopulations <- rownames(lupusCountMatAll)
nPopulations <- nrow(lupusCountMatAll)
allMethods <- c("voomCLR", "LinDA", "NBGLM")
nMethods <- length(allMethods)
resDfAll <- data.frame(population = unlist(lapply(ttList, rownames)),
contrast = rep(c("Asian", "European", "Interaction"), each=nPopulations),
log2FC = unlist(lapply(ttList, function(x) x$logFC)),
padj = unlist(lapply(ttList, function(x) x$adj.P.Val))
)
resDfAll$DA <- resDfAll$padj <= 0.05
pHeatVoomCLR_noProcessingCohort <- ggplot(resDfAll,
aes(x=contrast, y=population, color=log2FC, size=DA)) +
geom_point()+
theme_light()+
scale_color_gradient2(low= "blue", mid="gray", high= "red") +
theme(strip.text.x = element_text(size=14, angle=90, hjust = 1, vjust = 1)) +
xlab("Contrast") +
ylab("Cell type")
pHeatVoomCLR_noProcessingCohort
pHeatVoomCLR_noProcessingCohort <- ggplot(resDfAll,
aes(x=contrast, y=population, color=log2FC, size=DA)) +
geom_point()+
theme_light()+
scale_color_gradient2(low= "blue", mid="gray", high= "red") +
theme(strip.text.x = element_text(size=14, angle=90, hjust = 1, vjust = 1)) +
xlab("Contrast") +
ylab("Cell type") +
ggtitle("Significance at 5% FDR")
pHeatVoomCLR_noProcessingCohort
resDfAll$DA <- resDfAll$padj <= 0.1
pHeatVoomCLR_noProcessingCohort <- ggplot(resDfAll,
aes(x=contrast, y=population, color=log2FC, size=DA)) +
geom_point()+
theme_light()+
scale_color_gradient2(low= "blue", mid="gray", high= "red") +
theme(strip.text.x = element_text(size=14, angle=90, hjust = 1, vjust = 1)) +
xlab("Contrast") +
ylab("Cell type") +
ggtitle("Significance at 5% FDR")
pHeatVoomCLR_noProcessingCohort
View(pHeatVoomCLR_noProcessingCohort)
library(SingleCellExperiment)
library(scran)
library(scater)
sce <- readRDS("../data/SC2018/231115_sceAfterCellTypeAnnotation.rds")
sceB <- sce[,sce$cellType == "B-cell"]
sceB <- logNormCounts(sceB)
dec <- modelGeneVar(sceB)
hvgB <- getTopHVGs(dec, prop=0.05)
set.seed(1234)
sceB <- runPCA(sceB,
ncomponents=10,
subset_row=hvgB)
sceB <- runUMAP(sceB,
dimred = 'PCA',
external_neighbors = TRUE,
ncomponents = 10,
min_dist=0.4)
plotUMAP(sceB)
plotUMAP(sceB, colour_by="IGHD")
plotUMAP(sceB, colour_by="CD27")
plotUMAP(sceB, colour_by="IGHG1")
plotUMAP(sceB, colour_by="IGHA1")
plotUMAP(sceB, colour_by="CD38")
plotUMAP(sceB, colour_by="MS4A1")
set.seed(464688)
# Build a shared nearest-neighbor graph from PCA space
graph <- buildSNNGraph(sceB,
use.dimred = 'PCA')
# Leiden clustering on the SNN graph
cluster_leidenB <- factor(igraph::cluster_leiden(graph = graph,
resolution_parameter = 0.05)$membership)
nlevels(cluster_leidenB)
colData(sceB)$cluster_leidenB <- cluster_leidenB
plotUMAP(sceB, colour_by="cluster_leidenB")
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="IGHD") +
xlim(c(2,4)) +
ylim(c(7.5,12))
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="CD27") +
xlim(c(2,4)) +
ylim(c(7.5,12))
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="IGHG1") +
xlim(c(2,4)) +
ylim(c(7.5,12))
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="IGHA1") +
xlim(c(2,4)) +
ylim(c(7.5,12))
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="CD38") +
xlim(c(2,4)) +
ylim(c(7.5,12))
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="MS4A1") +
xlim(c(2,4)) +
ylim(c(7.5,12))
sceT <- sce[,sce$cellType == "T-cell"]
sceT <- logNormCounts(sceT)
dec <- modelGeneVar(sceT)
hvgT <- getTopHVGs(dec, prop=0.05)
set.seed(1234)
sceT <- runPCA(sceT,
ncomponents=10,
subset_row=hvgB)
sceT <- runUMAP(sceT,
dimred = 'PCA',
external_neighbors = TRUE,
ncomponents = 10,
min_dist=0.2)
plotUMAP(sceT)
plotUMAP(sceT, colour_by="GZMB")
plotUMAP(sceT, colour_by="GZMH")
plotUMAP(sceT, colour_by="CCR7")
plotUMAP(sceT, colour_by="SELL")
set.seed(464688)
# Build a shared nearest-neighbor graph from PCA space
graph <- buildSNNGraph(sceT,
use.dimred = 'PCA')
# Leiden clustering on the SNN graph
cluster_leidenT <- factor(igraph::cluster_leiden(graph = graph,
resolution_parameter = 0.001)$membership)
nlevels(cluster_leidenT)
colData(sceT)$cluster_leidenT <- cluster_leidenT
plotUMAP(sceT, colour_by="cluster_leidenT")
cellState <- sce$cellType
cellState[sce$cellType == "B-cell"] <- paste0("B",cluster_leidenB)
cellState[sce$cellType == "T-cell"] <-  paste0("T",cluster_leidenT)
sce$cellState <- cellState
sce$cellStateShort <- sce$cellState
sce$cellStateShort[sce$cellStateShort == "CD14 Monocyte"] <- "CD14 Mono"
sce$cellStateShort[sce$cellStateShort == "CD16 Monocyte"] <- "CD16 Mono"
sce$cellStateShort[sce$cellStateShort == "Megakaryocyte"] <- "Megakaryo"
plotReducedDim(sce,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="cellState") +
scale_color_manual(values=dayjob::paletteDiscrete(values=unique(sce$cellState), set="bear"))
library(dayjob)
cellCountsLong <- getCellPopulationCounts(sce,
patientVar = "sample",
cellTypeVar = "cellStateShort",
group = "condition",
format="long")
cellCountsWide <- getCellPopulationCounts(sce,
patientVar = "sample",
cellTypeVar = "cellStateShort",
group = "condition",
format="wide")
countMatrix <- cellCountsWide[,-c(1:2)]
countMatrix <- t(as.matrix(countMatrix))
cellCountsLong <- cellCountsLong %>%
group_by(patient, group) %>%
mutate(totalCells = sum(nCells),
nCellTypes = n(),
geoMean = prod(nCells+1)^(1/nCellTypes),
CLR = log((nCells+1) / geoMean )) %>%
ungroup() %>%
mutate(fractionCells = nCells / totalCells)
ggplot(cellCountsLong, aes(x=celltype, y=fractionCells, fill=group)) +
geom_boxplot(outlier.size = 0) +
geom_point(position = position_dodge(width = .75)) +
theme_classic()
ggplot(cellCountsLong, aes(x=celltype, y=CLR, fill=group)) +
geom_boxplot(outlier.size = 0) +
geom_point(position = position_dodge(width = .75)) +
theme_classic()
library(limma)
library(voomCLR)
design <- model.matrix( ~ group, data=cellCountsWide)
v <- voomCLR(counts = countMatrix,
design = design)
fit <- lmFit(v, design)
plotBeta(fit)
fit <- eBayes(fit)
tt <- topTableBC(fit, coef=2, n=Inf, bootstrap="parametric", voomWeights=v$weights)
tt
cLRMatAll <- v$E
library(scater)
pc <- calculatePCA(cLRMatAll,
ncomponents=2,
ntop=nrow(cLRMatAll))
dfPCA <- cbind(data.frame(pc1=pc[,1], pc2=pc[,2]), cellCountsWide[,1:2])
ggplot(dfPCA, aes(x=pc1, y=pc2, col=group)) +
geom_point() +
theme_classic() +
xlab(paste0("PC1 (", round(attr(pc, "percentVar")[1], 1),"%)")) +
ylab(paste0("PC2 (", round(attr(pc, "percentVar")[2], 1),"%)"))
library(glmmTMB)
resDfNB <- data.frame(population=rownames(countMatrix),
diff=rep(NA,nrow(countMatrix)),
se=rep(NA,nrow(countMatrix)),
pval=rep(NA,nrow(countMatrix)))
for(pp in 1:nrow(countMatrix)){
curY <- countMatrix[pp,]
m_p <- glmmTMB(curY ~ -1 + design,
family=nbinom2(link="log"),
offset = log(colSums(countMatrix)))
resDfNB[pp,2:4] <- c(summary(m_p)$coef$cond["designgroupSC",c(1,2,4)])
}
resDfNB$padj <- p.adjust(resDfNB$pval, "fdr")
resDfNB[order(abs(resDfNB$pval)),]
library(edgeR)
d <- DGEList(countMatrix)
d <- calcNormFactors(d)
d <- estimateDisp(d, design)
fit <- glmFit(d, design)
lrt <- glmLRT(fit, coef=2)
lrt$table$padj <- p.adjust(lrt$table$PValue, method="BH")
lrt$table[order(lrt$table$LR, decreasing=TRUE),]
library(MicrobiomeStat)
library(phyloseq)
lindaRes <- LinDA::linda(otu.tab = countMatrix, # rows features, cols samples
meta = as.data.frame(cellCountsWide),
formula = '~ group',
type = 'count',
adaptive=TRUE,
imputation = FALSE)
lindaRes$output$groupSC[order(abs(lindaRes$output$groupSC$stat), decreasing=TRUE),]
rm(list=ls())
library(SingleCellExperiment)
library(scran)
library(scater)
sce <- readRDS("../data/SC2018/231115_sceAfterCellTypeAnnotation.rds")
sceB <- sce[,sce$cellType == "B-cell"]
sceB <- logNormCounts(sceB)
dec <- modelGeneVar(sceB)
hvgB <- getTopHVGs(dec, prop=0.05)
set.seed(1234)
sceB <- runPCA(sceB,
ncomponents=10,
subset_row=hvgB)
sceB <- runUMAP(sceB,
dimred = 'PCA',
external_neighbors = TRUE,
ncomponents = 10,
min_dist=0.4)
plotUMAP(sceB)
plotUMAP(sceB, colour_by="IGHD")
plotUMAP(sceB, colour_by="CD27")
plotUMAP(sceB, colour_by="IGHG1")
plotUMAP(sceB, colour_by="IGHA1")
plotUMAP(sceB, colour_by="CD38")
plotUMAP(sceB, colour_by="MS4A1")
set.seed(464688)
# Build a shared nearest-neighbor graph from PCA space
graph <- buildSNNGraph(sceB,
use.dimred = 'PCA')
# Leiden clustering on the SNN graph
cluster_leidenB <- factor(igraph::cluster_leiden(graph = graph,
resolution_parameter = 0.05)$membership)
nlevels(cluster_leidenB)
colData(sceB)$cluster_leidenB <- cluster_leidenB
plotUMAP(sceB, colour_by="cluster_leidenB")
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="IGHD") +
xlim(c(2,4)) +
ylim(c(7.5,12))
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="CD27") +
xlim(c(2,4)) +
ylim(c(7.5,12))
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="IGHG1") +
xlim(c(2,4)) +
ylim(c(7.5,12))
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="IGHA1") +
xlim(c(2,4)) +
ylim(c(7.5,12))
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="CD38") +
xlim(c(2,4)) +
ylim(c(7.5,12))
plotReducedDim(sceB,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="MS4A1") +
xlim(c(2,4)) +
ylim(c(7.5,12))
sceT <- sce[,sce$cellType == "T-cell"]
sceT <- logNormCounts(sceT)
dec <- modelGeneVar(sceT)
hvgT <- getTopHVGs(dec, prop=0.05)
set.seed(1234)
sceT <- runPCA(sceT,
ncomponents=10,
subset_row=hvgB)
sceT <- runUMAP(sceT,
dimred = 'PCA',
external_neighbors = TRUE,
ncomponents = 10,
min_dist=0.2)
plotUMAP(sceT)
plotUMAP(sceT, colour_by="GZMB")
plotUMAP(sceT, colour_by="GZMH")
plotUMAP(sceT, colour_by="CCR7")
plotUMAP(sceT, colour_by="SELL")
set.seed(464688)
# Build a shared nearest-neighbor graph from PCA space
graph <- buildSNNGraph(sceT,
use.dimred = 'PCA')
# Leiden clustering on the SNN graph
cluster_leidenT <- factor(igraph::cluster_leiden(graph = graph,
resolution_parameter = 0.001)$membership)
nlevels(cluster_leidenT)
colData(sceT)$cluster_leidenT <- cluster_leidenT
plotUMAP(sceT, colour_by="cluster_leidenT")
cellState <- sce$cellType
cellState[sce$cellType == "B-cell"] <- paste0("B",cluster_leidenB)
cellState[sce$cellType == "T-cell"] <-  paste0("T",cluster_leidenT)
sce$cellState <- cellState
sce$cellStateShort <- sce$cellState
sce$cellStateShort[sce$cellStateShort == "CD14 Monocyte"] <- "CD14 Mono"
sce$cellStateShort[sce$cellStateShort == "CD16 Monocyte"] <- "CD16 Mono"
sce$cellStateShort[sce$cellStateShort == "Megakaryocyte"] <- "Megakaryo"
plotReducedDim(sce,
dimred = "UMAP_fastMNNCorrected",
point_size=1/2,
colour_by="cellState") +
scale_color_manual(values=dayjob::paletteDiscrete(values=unique(sce$cellState), set="bear"))
library(dayjob)
cellCountsLong <- getCellPopulationCounts(sce,
patientVar = "sample",
cellTypeVar = "cellStateShort",
group = "condition",
format="long")
cellCountsWide <- getCellPopulationCounts(sce,
patientVar = "sample",
cellTypeVar = "cellStateShort",
group = "condition",
format="wide")
countMatrix <- cellCountsWide[,-c(1:2)]
countMatrix <- t(as.matrix(countMatrix))
cellCountsLong <- cellCountsLong %>%
group_by(patient, group) %>%
mutate(totalCells = sum(nCells),
nCellTypes = n(),
geoMean = prod(nCells+1)^(1/nCellTypes),
CLR = log((nCells+1) / geoMean )) %>%
ungroup() %>%
mutate(fractionCells = nCells / totalCells)
ggplot(cellCountsLong, aes(x=celltype, y=fractionCells, fill=group)) +
geom_boxplot(outlier.size = 0) +
geom_point(position = position_dodge(width = .75)) +
theme_classic()
ggplot(cellCountsLong, aes(x=celltype, y=CLR, fill=group)) +
geom_boxplot(outlier.size = 0) +
geom_point(position = position_dodge(width = .75)) +
theme_classic()
library(limma)
library(voomCLR)
design <- model.matrix( ~ group, data=cellCountsWide)
v <- voomCLR(counts = countMatrix,
design = design)
fit <- lmFit(v, design)
plotBeta(fit)
fit <- eBayes(fit)
tt <- topTableBC(fit, coef=2, n=Inf, bootstrap="parametric", voomWeights=v$weights)
tt
cLRMatAll <- v$E
library(scater)
pc <- calculatePCA(cLRMatAll,
ncomponents=2,
ntop=nrow(cLRMatAll))
dfPCA <- cbind(data.frame(pc1=pc[,1], pc2=pc[,2]), cellCountsWide[,1:2])
ggplot(dfPCA, aes(x=pc1, y=pc2, col=group)) +
geom_point() +
theme_classic() +
xlab(paste0("PC1 (", round(attr(pc, "percentVar")[1], 1),"%)")) +
ylab(paste0("PC2 (", round(attr(pc, "percentVar")[2], 1),"%)"))
library(glmmTMB)
resDfNB <- data.frame(population=rownames(countMatrix),
diff=rep(NA,nrow(countMatrix)),
se=rep(NA,nrow(countMatrix)),
pval=rep(NA,nrow(countMatrix)))
for(pp in 1:nrow(countMatrix)){
curY <- countMatrix[pp,]
m_p <- glmmTMB(curY ~ -1 + design,
family=nbinom2(link="log"),
offset = log(colSums(countMatrix)))
resDfNB[pp,2:4] <- c(summary(m_p)$coef$cond["designgroupSC",c(1,2,4)])
}
resDfNB$padj <- p.adjust(resDfNB$pval, "fdr")
resDfNB[order(abs(resDfNB$pval)),]
library(edgeR)
d <- DGEList(countMatrix)
d <- calcNormFactors(d)
d <- estimateDisp(d, design)
fit <- glmFit(d, design)
lrt <- glmLRT(fit, coef=2)
lrt$table$padj <- p.adjust(lrt$table$PValue, method="BH")
lrt$table[order(lrt$table$LR, decreasing=TRUE),]
library(MicrobiomeStat)
library(phyloseq)
lindaRes <- LinDA::linda(otu.tab = countMatrix, # rows features, cols samples
meta = as.data.frame(cellCountsWide),
formula = '~ group',
type = 'count',
adaptive=TRUE,
imputation = FALSE)
lindaRes$output$groupSC[order(abs(lindaRes$output$groupSC$stat), decreasing=TRUE),]
library(reticulate)
library(reticulate)
reticulate::use_python("/Users/koenvandenberge/opt/anaconda3/bin/python")
reticulate::repl_python()
